{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","timerId","state","time","Date","this","setInterval","setState","console","log","toLocaleTimeString","oldName","clockName","newName","props","clearInterval","React","Component","App","isClockVisible","Math","round","random","showClock","hideClock","renameClock","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"sNAUaA,EAAb,4MACEC,aADF,IAGEC,MAAc,CACZC,KAAM,IAAIC,MAJd,uDAOE,WAAqB,IAAD,OAClBC,KAAKJ,QAAUK,aAAY,WACzB,EAAKC,SAAS,CAAEJ,KAAM,IAAIC,OAE1BI,QAAQC,IAAI,EAAKP,MAAMC,KAAKO,wBAC3B,OAZP,gCAeE,YAAmD,IAAnBC,EAAkB,EAA7BC,UACAC,EAAYR,KAAKS,MAA5BF,UAEJC,IAAYF,GAEdH,QAAQC,IAAR,yBAA8BI,MApBpC,kCAwBE,WACMR,KAAKJ,SACPc,cAAcV,KAAKJ,WA1BzB,oBA8BE,WACE,IAAQE,EAASE,KAAKH,MAAdC,KAER,OACE,8BACE,8CAEG,IACAA,EAAKO,8BAtChB,GAA2BM,IAAMC,WCApBC,EAAb,4MACEhB,MAAQ,CACNiB,gBAAgB,EAChBP,UAAWQ,KAAKC,MAAsB,IAAhBD,KAAKE,WAH/B,EAMEC,UAAY,WACV,EAAKhB,SAAS,CAAEY,gBAAgB,KAPpC,EAUEK,UAAY,WACV,EAAKjB,SAAS,CAAEY,gBAAgB,KAXpC,EAcEM,YAAc,WACZ,EAAKlB,SAAS,CAAEK,UAAWQ,KAAKC,MAAsB,IAAhBD,KAAKE,aAf/C,4CAkBE,WACE,IAAQH,EAAmBd,KAAKH,MAAxBiB,eAER,OACE,sBAAKO,UAAU,MAAf,UACE,6CACA,wBACEC,KAAK,SACLC,QAASvB,KAAKmB,UAFhB,wBAMC,IAED,wBACEG,KAAK,SACLC,QAASvB,KAAKkB,UAFhB,wBAMC,IAED,wBACEI,KAAK,SACLC,QAASvB,KAAKoB,YAFhB,6BAMCN,GAAkB,cAAC,EAAD,CAAOP,UAAWP,KAAKH,MAAMU,mBA9CxD,GAAyBI,IAAMC,WCP/BY,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.569954cd.chunk.js","sourcesContent":["import React from 'react';\n\ninterface State {\n  time: Date;\n}\n\ninterface Props {\n  clockName: number\n}\n\nexport class Clock extends React.Component<Props> {\n  timerId?: NodeJS.Timer;\n\n  state:State = {\n    time: new Date(),\n  };\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({ time: new Date() });\n      // eslint-disable-next-line no-console\n      console.log(this.state.time.toLocaleTimeString());\n    }, 1000);\n  }\n\n  componentDidUpdate({ clockName: oldName }: Props) {\n    const { clockName: newName } = this.props;\n\n    if (newName !== oldName) {\n      // eslint-disable-next-line\n      console.log(`Clock  now is  ${newName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n    }\n  }\n\n  render() {\n    const { time } = this.state;\n\n    return (\n      <div>\n        <p>\n          Current time:\n          {' '}\n          {time.toLocaleTimeString() }\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\n\nimport { Clock } from './components/Clock/Clock';\n\ninterface State {\n  isClockVisible: boolean;\n  clockName: number;\n}\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isClockVisible: true,\n    clockName: Math.round(Math.random() * 1000),\n  };\n\n  showClock = () => {\n    this.setState({ isClockVisible: true });\n  };\n\n  hideClock = () => {\n    this.setState({ isClockVisible: false });\n  };\n\n  renameClock = () => {\n    this.setState({ clockName: Math.round(Math.random() * 1000) });\n  };\n\n  render() {\n    const { isClockVisible } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <button\n          type=\"button\"\n          onClick={this.hideClock}\n        >\n          Hide Clock\n        </button>\n        {' '}\n\n        <button\n          type=\"button\"\n          onClick={this.showClock}\n        >\n          Show Clock\n        </button>\n        {' '}\n\n        <button\n          type=\"button\"\n          onClick={this.renameClock}\n        >\n          Set random name\n        </button>\n        {isClockVisible && <Clock clockName={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}